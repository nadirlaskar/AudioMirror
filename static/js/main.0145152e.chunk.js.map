{"version":3,"sources":["AudioMirror.js","App.js","serviceWorker.js","index.js"],"names":["hasHeadset","audio","useRef","useEffect","current","navigator","mediaDevices","getUserMedia","then","mediaStreamObj","srcObject","src","window","URL","createObjectURL","onloadedmetadata","ev","console","log","play","catch","err","name","message","setupAudio","ref","App","useState","setHasHeadset","callback","updateDevices","stream","enumerateDevices","devices","headphonesConnected","filter","device","test","kind","find","label","toLowerCase","includes","ondevicechange","hasHeadsetCheck","flag","shoudUseHeadsetUI","className","join","alt","href","target","rel","AudioMirror","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0145152e.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\n/**\n * Setup audio recording\n * @param {Audio} audio \n    Connect the media stream to the audio element\n    returns the recorded audio via 'audio' tag\n */\nconst setupAudio = (audio) => {\n  let audioIN = {\n    audio: true,\n  };\n  //  audio is true, for recording\n\n  // Access the permission for use\n  // the microphone\n  navigator.mediaDevices\n    .getUserMedia(audioIN)\n    // 'then()' method returns a Promise\n    .then(function (mediaStreamObj) {\n      // 'srcObject' is a property which\n      // takes the media object\n      // This is supported in the newer browsers\n      if (\"srcObject\" in audio) {\n        audio.srcObject = mediaStreamObj;\n      } else {\n        // Old version\n        audio.src = window.URL.createObjectURL(mediaStreamObj);\n      }\n\n      // It will play the audio\n      audio.onloadedmetadata = function (ev) {\n        // Play the audio in the 2nd audio\n        // element what is being recorded\n        console.log('playing')\n        audio.play();\n      };\n    })\n\n    // If any error occurs then handles the error\n    .catch(function (err) {\n      console.log(err.name, err.message);\n    });\n};\n\nexport default ({hasHeadset}) => {\n  const audio = useRef();\n  useEffect(() => {\n    if (audio.current !== null && hasHeadset) {\n      setupAudio(audio.current);\n    }\n  }, [audio, hasHeadset]);\n  return <audio ref={audio}></audio>;\n};\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport AudioMirror from \"./AudioMirror\";\n\nconst hasHeadsetCheck = (callback) => {\n  const updateDevices = () => {\n    navigator.mediaDevices\n      .getUserMedia({ audio: true })\n      .then((stream) => {\n        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n          // check to see if we have any device with \"head\" in its name connected\n          // like \"headset\" or \"headphones\"\n          let headphonesConnected = devices\n            .filter((device) => /audio\\w+/.test(device.kind))\n            .find((device) => device.label.toLowerCase().includes(\"head\"));\n          if (headphonesConnected) {\n            callback(true);\n          } else {\n            callback(false);\n          }\n        });\n      }).catch(() => callback(false));\n  };\n  updateDevices();\n  // add an ondevicechange event listener so we can tell when\n  // an input device is connected and disconnected\n  navigator.mediaDevices.ondevicechange = updateDevices;\n};\n\nfunction App() {\n  const [hasHeadset, setHasHeadset] = useState(null);\n  useEffect(\n    () =>\n      hasHeadsetCheck((flag) => {\n        setHasHeadset(flag);\n      }),\n    []\n  );\n  const shoudUseHeadsetUI = (\n    <h3>\n      {hasHeadset === false\n        ? \"Please use a headphone to use this application.\"\n        : hasHeadset == null\n        ? \"Checking headphone...\"\n        : \"Try saying - I am IronMan!\"}\n    </h3>\n  );\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Audio Mirror - Test your mic !</h1>\n        {shoudUseHeadsetUI}\n        <div className={[\"App-logo\", hasHeadset ? \" active\" : \"\"].join(\"\")} alt=\"logo\" />\n        <p>This site needs audio permission</p>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/nadirlaskar/AudioMirror/blob/master/README.md\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn More\n        </a>\n      </header>\n      <AudioMirror hasHeadset={hasHeadset}></AudioMirror>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}